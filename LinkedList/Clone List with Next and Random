Link : https://www.geeksforgeeks.org/batch/gfg-160-problems/track/linked-list-gfg-160/problem/clone-a-linked-list-with-next-and-random-pointer


/* Link list Node
struct Node {
    int data;
    Node *next;
    Node *random;

    Node(int x) {
        data = x;
        next = NULL;
        random = NULL;
    }
};*/

class Solution {
  public:
    void insertNode(Node *&head,Node*&tail , int d)
    {
        Node *newNode = new Node(d);
        if(tail == NULL)
        {
            head=tail=newNode;
        }
        else
        {
            tail->next = newNode;
            tail = newNode;
        }
    }
    Node *cloneLinkedList(Node *head) {
        // Write your code here
        Node *temp = head;
        Node *cloneHead = NULL;
        Node * cloneTail = NULL;
        while(temp!=NULL)
        {
            insertNode(cloneHead,cloneTail,temp->data);
            temp = temp->next;
        }
        Node *cloneNode = cloneHead;
        Node * originalNode = head;
        
        while(cloneNode!=NULL && originalNode!=NULL)
        {
            Node*next  = originalNode->next;
            originalNode->next = cloneNode;
            originalNode  = next;
            
            next = cloneNode->next;
            cloneNode->next = originalNode;
            cloneNode = next;
        }
        temp = head;
        while(temp!=NULL)
        {
            if(temp->next!=NULL)
            {
                temp->next->random =  temp->random ?
                temp->random->next : temp->random;
            }
            temp = temp->next->next;
        }
        originalNode = head;
        cloneNode = cloneHead;
        while(originalNode!=NULL && cloneNode!=NULL)
        {
            originalNode->next = cloneNode->next;
            originalNode = originalNode->next;
            if(originalNode!=NULL)
            {
                cloneNode->next = originalNode->next;
            }
            cloneNode = cloneNode->next;
        }
        return cloneHead;
    }
};

Time Complexity: O(n)
Space Complexity: O(n)
