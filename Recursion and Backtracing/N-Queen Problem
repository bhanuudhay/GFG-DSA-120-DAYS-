Link : https://www.geeksforgeeks.org/batch/gfg-160-problems/track/recursion-and-backtracking-gfg-160/problem/n-queen-problem0315

class Solution {
  public:
    bool isSafe(int row,int col,vector<vector<int>> &board, int n)
    {
        int x = row, y = col;
        while(y>=0)
        {
            if(board[x][y] == 1)
            {
                return false;
            }
            y--;;
        }
        x = row,y = col;
        while(x>=0 && y>=0)
        {
            if(board[x][y] == 1)
            {
                return false;
            }
            x--;
            y--;
        }
        x =row , y = col;
        while(x<n && y>=0)
        {
            if(board[x][y] == 1)
            {
                return false;
            }
            x++;
            y--;
        }
        return true;
    }
    void addSol(vector<vector<int>>&ans,vector<vector<int>> &board, int n)
    {
        vector<int> temp;
        for(int i =0 ; i< n ; i++)
        {
            for(int j =0 ; j<n ;j++)
            {
                if(board[i][j] == 1)
                {
                    temp.push_back(j+1);
                }
            }
        }
        ans.push_back(temp);
    }
    void solve(int col,vector<vector<int>> &ans,vector<vector<int>> &board, int n)
    {
        if(col == n)
        {
            addSol(ans,board,n);
            return;
        }
        for(int row = 0; row < n ;row++)
        {
            if(isSafe(row,col,board,n))
            {
                board[row][col] = 1;
                solve(col+1,ans,board,n);
                board[row][col] = 0;
            }
        }
    }
    vector<vector<int>> nQueen(int n) {
        // code here
        vector<vector<int>> board(n, vector<int>(n,0));
        vector<vector<int>> ans ;
        solve(0,ans,board,n);
        return ans;
    }
};
