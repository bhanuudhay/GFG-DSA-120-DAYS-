Link : https://www.geeksforgeeks.org/batch/gfg-160-problems/track/recursion-and-backtracking-gfg-160/problem/word-search


class Solution {
  public:
    int n , m;
    vector<vector<int>> direction{{0,1},{0,-1},{1,0},{-1,0}};
    bool find(int i , int j , vector<vector<char>>& mat, string& word , int idx)
    {
        if(idx == word.length())
        {
            return true;
        }
        if( i < 0 || i>= n || j < 0 || j>=m || mat[i][j] ==  '$')
        {
            return false;
        }
        if(mat[i][j] != word[idx])
        {
            return false;
        }
        
        char temp = mat[i][j];
        mat[i][j] = '$';
        for(auto &dir :direction)
        {
            int new_i = i + dir[0];
            int new_j = j + dir[1];
            
            if(find(new_i,new_j,mat,word,idx+1))
            {
                return true;
            }
        }
        mat[i][j] = temp;
        return false;
        
    }
    bool isWordExist(vector<vector<char>>& mat, string& word) {
        // Code here
        n = mat.size();
        m = mat[0].size();
        for(int i =0  ; i< n ;i++)
        {
            for(int j =0 ;j< m;j++)
            {
                if(mat[i][j] == word[0] && find(i,j,mat,word,0))
                {
                    return true;
                }
            }
        }
        return false;
    }
};
